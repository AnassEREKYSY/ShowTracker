name: CI • Build, Test, E2E, Dockerize & Push

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}
  API_IMAGE: ${{ github.repository_owner }}/mse-api
  CLIENT_IMAGE: ${{ github.repository_owner }}/mse-client

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test-api:
    name: Build & Unit Test API (Node + Jest)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: server/package-lock.json

      - name: Install deps (server)
        working-directory: server
        run: npm ci

      - name: Prisma generate
        working-directory: server
        run: npm run prisma:generate

      - name: Build (tsc)
        working-directory: server
        run: npm run build

      - name: Unit tests (Jest)
        working-directory: server
        run: npm run test:cov

      - name: Upload Jest coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: server-coverage
          path: server/coverage
          retention-days: 14

  e2e-and-push:
    name: Playwright E2E • Dockerize • Push Images
    runs-on: ubuntu-latest
    needs: build-and-test-api
    steps:
      - uses: actions/checkout@v4

      - name: Detect client directory
        id: detect_client
        shell: bash
        run: |
          set -e
          for p in client/client client frontend web app; do
            if [ -f "$p/package.json" ]; then
              echo "dir=$p" >> $GITHUB_OUTPUT
              echo "Detected client dir: $p"
              exit 0
            fi
          done
          echo "Could not find client package.json in known locations." >&2
          ls -la
          exit 1

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: |
            server/package-lock.json
            ${{ steps.detect_client.outputs.dir }}/package-lock.json

      - name: Pre-create env path for teardown
        run: mkdir -p server && touch server/.env

      - name: Install deps (client)
        working-directory: ${{ steps.detect_client.outputs.dir }}
        run: npm ci

      - name: Build client (Angular)
        working-directory: ${{ steps.detect_client.outputs.dir }}
        run: npm run build

      - name: Install Playwright browsers
        working-directory: ${{ steps.detect_client.outputs.dir }}
        run: npx playwright install --with-deps

      - name: Create server .env for compose (CI)
        run: |
          cat > server/.env <<'EOF'
          NODE_ENV=production
          PORT=4000
          DATABASE_URL=postgresql://postgres:postgres@db:5432/movies?schema=public
          REDIS_URL=redis://redis:6379
          TMDB_API_KEY=${{ secrets.TMDB_API_KEY }}
          TMDB_ACCESS_TOKEN=${{ secrets.TMDB_ACCESS_TOKEN }}
          CORS_ORIGIN=http://localhost:8080
          JWT_ACCESS_SECRET=${{ secrets.JWT_ACCESS_SECRET }}
          JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
          ACCESS_TOKEN_TTL=15m
          REFRESH_TOKEN_TTL=7d
          COOKIE_NAME=rt
          COOKIE_DOMAIN=localhost
          EOF

      - name: Start docker-compose (db, redis, api)
        run: |
          docker compose -f docker-compose.yml up -d --build db redis api
          echo "Waiting for API on :4000..."
          ready=""
          for i in {1..60}; do
            if curl -fsS http://localhost:4000/health || curl -fsS http://localhost:4000; then
              echo "API is up"
              ready="yes"
              break
            fi
            sleep 2
          done
          if [ -z "$ready" ]; then
            echo "API did not become healthy in time"
            docker compose -f docker-compose.yml ps
            docker compose -f docker-compose.yml logs api || true
            exit 1
          fi

      - name: Apply Prisma migrations in API container
        run: |
          docker compose -f docker-compose.yml exec -T api npx prisma migrate deploy \
            || docker compose -f docker-compose.yml exec -T api npm run db:push

      - name: Run Playwright tests
        working-directory: ${{ steps.detect_client.outputs.dir }}
        env:
          CI: 'true'
        run: npm run e2e -- --reporter=html

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: ${{ steps.detect_client.outputs.dir }}/playwright-report
          retention-days: 14

      - name: Ensure env file exists for teardown
        if: always()
        run: mkdir -p server && touch server/.env

      - name: Tear down docker-compose
        if: always()
        run: docker compose -f docker-compose.yml down -v || true

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push API image
        uses: docker/build-push-action@v6
        with:
          context: ./server
          file: ./server/Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.API_IMAGE }}:sha-${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.API_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & Push Client image
        uses: docker/build-push-action@v6
        with:
          context: ./client
          file: ./client/Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.CLIENT_IMAGE }}:sha-${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.CLIENT_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
