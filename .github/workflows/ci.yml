name: CI • Build, Test, E2E, Dockerize & Push

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test-api:
    name: Build & Unit Test API (Node + Jest)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: server/package-lock.json

      - name: Install deps (server)
        working-directory: server
        run: npm ci

      - name: Prisma generate
        working-directory: server
        run: npm run prisma:generate

      - name: Build (tsc)
        working-directory: server
        run: npm run build

      - name: Unit tests (Jest)
        working-directory: server
        run: npm run test:cov

      - name: Upload Jest coverage (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: server-coverage
          path: server/coverage
          retention-days: 14

  e2e-and-push:
    name: Playwright E2E • Dockerize • Push Image
    runs-on: ubuntu-latest
    needs: build-and-test-api
    steps:
      - uses: actions/checkout@v4

      - name: Compute lowercase image name
        run: |
          owner_lc="$(echo "$GITHUB_REPOSITORY_OWNER" | tr '[:upper:]' '[:lower:]')"
          echo "IMAGE=${owner_lc}/showtracker" >> "$GITHUB_ENV"

      - name: Detect client directory
        id: detect_client
        shell: bash
        run: |
          set -e
          for p in client client/client frontend web app; do
            if [ -f "$p/package.json" ]; then
              echo "dir=$p" >> "$GITHUB_OUTPUT"
              echo "Detected client dir: $p"
              exit 0
            fi
          done
          echo "Could not find client package.json in known locations." >&2
          ls -la
          exit 1

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: |
            server/package-lock.json
            ${{ steps.detect_client.outputs.dir }}/package-lock.json

      - name: Install deps (client)
        working-directory: ${{ steps.detect_client.outputs.dir }}
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ${{ steps.detect_client.outputs.dir }}
        run: npx playwright install --with-deps

      - name: Pre-create env path for teardown
        run: mkdir -p server && touch server/.env

      - name: Create server .env for compose (CI)
        run: |
          cat > server/.env <<'EOF'
          NODE_ENV=production
          PORT=4000
          DATABASE_URL=postgresql://postgres:postgres@db:5432/movies?schema=public
          REDIS_URL=redis://redis:6379
          TMDB_API_KEY=${{ secrets.TMDB_API_KEY }}
          TMDB_ACCESS_TOKEN=${{ secrets.TMDB_ACCESS_TOKEN }}
          CORS_ORIGIN=http://localhost:4000
          JWT_ACCESS_SECRET=${{ secrets.JWT_ACCESS_SECRET }}
          JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
          ACCESS_TOKEN_TTL=15m
          REFRESH_TOKEN_TTL=7d
          COOKIE_NAME=rt
          COOKIE_DOMAIN=localhost
          EOF

      - name: Start docker-compose (db, redis, app)
        run: |
          docker compose -f docker-compose.yml up -d --build db redis app
          echo "Waiting for API on :4000..."
          for i in {1..60}; do
            if curl -sS http://localhost:4000/api/health >/dev/null 2>&1; then
              echo "API responded (ready)."
              exit 0
            fi
            sleep 2
          done
          echo "API did not become healthy in time"
          docker compose -f docker-compose.yml ps
          docker compose -f docker-compose.yml logs app || true
          exit 1

      - name: Run Playwright tests
        working-directory: ${{ steps.detect_client.outputs.dir }}
        env:
          CI: 'true'
        run: npm run e2e -- --reporter=html --base-url=http://localhost:4000

      - name: Upload Playwright report (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: ${{ steps.detect_client.outputs.dir }}/playwright-report
          retention-days: 14

      - name: Ensure env file exists for teardown
        if: always()
        run: mkdir -p server && touch server/.env

      - name: Tear down docker-compose
        if: always()
        run: docker compose -f docker-compose.yml down -v || true

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx (container driver)
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver: docker-container

      - name: Build & Push ShowTracker image
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: |
            ghcr.io/${{ env.IMAGE }}:sha-${{ github.sha }}
            ghcr.io/${{ env.IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            CLIENT_DIR=${{ steps.detect_client.outputs.dir }}
            SERVER_DIR=server
