name: CI â€¢ Build, Test, E2E, Dockerize & Push

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test-api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: server/package-lock.json
      - run: npm ci && npm run prisma:generate && npm run build && npm run test:cov
        working-directory: server
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: server-coverage
          path: server/coverage
          retention-days: 7

  build-and-test-client:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - id: detect_client
        run: |
          for p in client/client client frontend web app; do
            if [ -f "$p/package.json" ]; then
              echo "dir=$p" >> "$GITHUB_OUTPUT"
              exit 0
            fi
          done
          exit 1
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: ${{ steps.detect_client.outputs.dir }}/package-lock.json
      - run: npm ci
        working-directory: ${{ steps.detect_client.outputs.dir }}
      - run: npm run build -- --configuration=production
        working-directory: ${{ steps.detect_client.outputs.dir }}
      - uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-playwright-
      - run: npx playwright install --with-deps
        working-directory: ${{ steps.detect_client.outputs.dir }}
      - run: npm run e2e -- --reporter=html
        working-directory: ${{ steps.detect_client.outputs.dir }}
        env:
          CI: 'true'
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: ${{ steps.detect_client.outputs.dir }}/playwright-report
          retention-days: 7

  dockerize-and-push:
    runs-on: ubuntu-latest
    needs: [build-and-test-api, build-and-test-client]
    steps:
      - uses: actions/checkout@v4
      - run: |
          owner_lc="$(echo "$GITHUB_REPOSITORY_OWNER" | tr '[:upper:]' '[:lower:]')"
          echo "OWNER_LC=$owner_lc" >> "$GITHUB_ENV"
          echo "API_IMAGE=$owner_lc/showtracker-api" >> "$GITHUB_ENV"
          echo "CLIENT_IMAGE=$owner_lc/showtracker-client" >> "$GITHUB_ENV"
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/setup-buildx-action@v3
        id: buildx
        with:
          install: true
          driver: docker-container
      - uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./server
          file: ./server/Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.API_IMAGE }}:sha-${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.API_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./client
          file: ./client/Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.CLIENT_IMAGE }}:sha-${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.CLIENT_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-ovh:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: dockerize-and-push
    steps:
      - run: |
          owner_lc="$(echo "$GITHUB_REPOSITORY_OWNER" | tr '[:upper:]' '[:lower:]')"
          echo "OWNER_LC=$owner_lc" >> "$GITHUB_ENV"
          echo "REGISTRY=ghcr.io" >> "$GITHUB_ENV"
          echo "API_IMAGE=$owner_lc/showtracker-api" >> "$GITHUB_ENV"
          echo "CLIENT_IMAGE=$owner_lc/showtracker-client" >> "$GITHUB_ENV"
      - uses: appleboy/ssh-action@v1.0.0
        env:
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
          TMDB_ACCESS_TOKEN: ${{ secrets.TMDB_ACCESS_TOKEN }}
          JWT_ACCESS_SECRET: ${{ secrets.JWT_ACCESS_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
        with:
          host: ${{ secrets.OVH_HOST }}
          username: ${{ secrets.OVH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: REGISTRY,API_IMAGE,CLIENT_IMAGE,GHCR_TOKEN,POSTGRES_PASSWORD,TMDB_API_KEY,TMDB_ACCESS_TOKEN,JWT_ACCESS_SECRET,JWT_REFRESH_SECRET
          script: |
            set -euo pipefail
            if ! docker compose version >/dev/null 2>&1; then
              mkdir -p ~/.docker/cli-plugins
              curl -fsSL "https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-$(uname -s)-$(uname -m)" -o ~/.docker/cli-plugins/docker-compose
              chmod +x ~/.docker/cli-plugins/docker-compose
            fi
            APP_DIR=$HOME/showtracker
            mkdir -p "$APP_DIR"
            cd "$APP_DIR"
            echo "$GHCR_TOKEN" | docker login "$REGISTRY" -u "${{ github.actor }}" --password-stdin
            cat > .env <<EOF
            NODE_ENV=production
            PORT=4000
            DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/movies?schema=public
            REDIS_URL=redis://redis:6379
            TMDB_API_KEY=${TMDB_API_KEY}
            TMDB_ACCESS_TOKEN=${TMDB_ACCESS_TOKEN}
            CORS_ORIGIN=
            JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
            JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
            ACCESS_TOKEN_TTL=15m
            REFRESH_TOKEN_TTL=7d
            COOKIE_NAME=rt
            COOKIE_DOMAIN=
            POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            EOF
            cat > docker-compose.yml <<'YML'
            services:
              db:
                image: postgres:16-alpine
                environment:
                  POSTGRES_USER: postgres
                  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
                  POSTGRES_DB: movies
                volumes:
                  - db-data:/var/lib/postgresql/data
                restart: unless-stopped
              redis:
                image: redis:7-alpine
                command: ["redis-server","--appendonly","yes"]
                volumes:
                  - redis-data:/data
                restart: unless-stopped
              api:
                image: ${REGISTRY}/${API_IMAGE}:latest
                env_file: .env
                depends_on:
                  - db
                  - redis
                ports:
                  - "4000:4000"
                restart: unless-stopped
              client:
                image: ${REGISTRY}/${CLIENT_IMAGE}:latest
                depends_on:
                  - api
                ports:
                  - "8080:80"
                restart: unless-stopped
            volumes:
              db-data:
              redis-data:
            YML
            docker compose pull
            docker compose up -d
            docker compose exec -T db sh -lc 'until pg_isready -U postgres -h 127.0.0.1; do sleep 1; done'
            docker compose exec -T api sh -lc 'npx prisma db push'
