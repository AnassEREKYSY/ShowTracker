name: CI • Build, Test, E2E, Dockerize & Push

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test-api:
    name: Build & Unit Test API (Node + Jest)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: server/package-lock.json

      - name: Install deps (server)
        working-directory: server
        run: npm ci

      - name: Prisma generate
        working-directory: server
        run: npm run prisma:generate

      - name: Build (tsc)
        working-directory: server
        run: npm run build

      - name: Unit tests (Jest)
        working-directory: server
        run: npm run test:cov

      - name: Upload Jest coverage (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: server-coverage
          path: server/coverage
          retention-days: 14

  e2e-and-push:
    name: Playwright E2E • Dockerize • Push Images
    runs-on: ubuntu-latest
    needs: build-and-test-api
    steps:
      - uses: actions/checkout@v4

      - name: Compute lowercase image names
        run: |
          owner_lc="$(echo "$GITHUB_REPOSITORY_OWNER" | tr '[:upper:]' '[:lower:]')"
          echo "OWNER_LC=$owner_lc" >> "$GITHUB_ENV"
          echo "API_IMAGE=$owner_lc/showtracker-api" >> "$GITHUB_ENV"
          echo "CLIENT_IMAGE=$owner_lc/showtracker-client" >> "$GITHUB_ENV"

      - name: Detect client directory
        id: detect_client
        shell: bash
        run: |
          set -e
          for p in client/client client frontend web app; do
            if [ -f "$p/package.json" ]; then
              echo "dir=$p" >> "$GITHUB_OUTPUT"
              echo "Detected client dir: $p"
              exit 0
            fi
          done
          echo "Could not find client package.json in known locations." >&2
          ls -la
          exit 1

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: |
            server/package-lock.json
            ${{ steps.detect_client.outputs.dir }}/package-lock.json

      - name: Pre-create env path for teardown
        run: mkdir -p server && touch server/.env

      - name: Install deps (client)
        working-directory: ${{ steps.detect_client.outputs.dir }}
        run: npm ci

      - name: Build client (Angular)
        working-directory: ${{ steps.detect_client.outputs.dir }}
        run: npm run build

      - name: Install Playwright browsers
        working-directory: ${{ steps.detect_client.outputs.dir }}
        run: npx playwright install --with-deps

      - name: Create server .env for compose (CI)
        run: |
          cat > server/.env <<'EOF'
          NODE_ENV=production
          PORT=4000
          DATABASE_URL=postgresql://postgres:postgres@db:5432/movies?schema=public
          REDIS_URL=redis://redis:6379
          TMDB_API_KEY=${{ secrets.TMDB_API_KEY }}
          TMDB_ACCESS_TOKEN=${{ secrets.TMDB_ACCESS_TOKEN }}
          CORS_ORIGIN=http://localhost:8080
          JWT_ACCESS_SECRET=${{ secrets.JWT_ACCESS_SECRET }}
          JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
          ACCESS_TOKEN_TTL=15m
          REFRESH_TOKEN_TTL=7d
          COOKIE_NAME=rt
          COOKIE_DOMAIN=localhost
          EOF

      - name: Start docker-compose (db, redis, api)
        run: |
          docker compose -f docker-compose.yml up -d --build db redis api
          echo "Waiting for API on :4000..."
          ready=""
          for i in {1..60}; do
            if curl -sS http://localhost:4000/health >/dev/null 2>&1 || \
               curl -sS http://localhost:4000 >/dev/null 2>&1; then
              echo "API responded (ready)."
              ready="yes"
              break
            fi
            sleep 2
          done
          if [ -z "$ready" ]; then
            echo "API did not become healthy in time"
            docker compose -f docker-compose.yml ps
            docker compose -f docker-compose.yml logs api || true
            exit 1
          fi

      - name: Apply Prisma migrations in API container
        run: |
          docker compose -f docker-compose.yml exec -T api npx prisma migrate deploy \
            || docker compose -f docker-compose.yml exec -T api npm run db:push

      - name: Run Playwright tests
        working-directory: ${{ steps.detect_client.outputs.dir }}
        env:
          CI: 'true'
        run: npm run e2e -- --reporter=html

      - name: Upload Playwright report (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: ${{ steps.detect_client.outputs.dir }}/playwright-report
          retention-days: 14

      - name: Ensure env file exists for teardown
        if: always()
        run: mkdir -p server && touch server/.env

      - name: Tear down docker-compose
        if: always()
        run: docker compose -f docker-compose.yml down -v || true

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx (container driver)
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver: docker-container

      - name: Build & Push API image
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./server
          file: ./server/Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.API_IMAGE }}:sha-${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.API_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & Push Client image
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./client
          file: ./client/Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.CLIENT_IMAGE }}:sha-${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.CLIENT_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-ovh:
    name: Deploy to OVH (docker-compose)
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: e2e-and-push

    steps:
      - name: Compute lowercase image names
        run: |
          owner_lc="$(echo "$GITHUB_REPOSITORY_OWNER" | tr '[:upper:]' '[:lower:]')"
          echo "OWNER_LC=$owner_lc" >> "$GITHUB_ENV"
          echo "REGISTRY=ghcr.io" >> "$GITHUB_ENV"
          echo "API_IMAGE=$owner_lc/showtracker-api" >> "$GITHUB_ENV"
          echo "CLIENT_IMAGE=$owner_lc/showtracker-client" >> "$GITHUB_ENV"

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.OVH_HOST }}
          username: ${{ secrets.OVH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: REGISTRY,API_IMAGE,CLIENT_IMAGE,TMDB_API_KEY,TMDB_ACCESS_TOKEN,JWT_ACCESS_SECRET,JWT_REFRESH_SECRET,POSTGRES_PASSWORD
          script: |
            set -euo pipefail
            APP_DIR=/opt/showtracker
            mkdir -p "$APP_DIR"
            cd "$APP_DIR"

            echo "${{ secrets.GHCR_TOKEN }}" | docker login $REGISTRY -u "${{ github.actor }}" --password-stdin

            cat > .env <<'EOF'
            NODE_ENV=production
            PORT=4000
            DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/movies?schema=public
            REDIS_URL=redis://redis:6379
            TMDB_API_KEY=${TMDB_API_KEY}
            TMDB_ACCESS_TOKEN=${TMDB_ACCESS_TOKEN}
            CORS_ORIGIN=
            JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
            JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
            ACCESS_TOKEN_TTL=15m
            REFRESH_TOKEN_TTL=7d
            COOKIE_NAME=rt
            COOKIE_DOMAIN=
            EOF

            cat > docker-compose.yml <<'YML'
            version: "3.9"
            services:
              db:
                image: postgres:16-alpine
                container_name: showtracker-db
                environment:
                  POSTGRES_USER: postgres
                  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
                  POSTGRES_DB: movies
                volumes:
                  - db-data:/var/lib/postgresql/data
                restart: unless-stopped

              redis:
                image: redis:7-alpine
                container_name: showtracker-redis
                command: ["redis-server","--appendonly","yes"]
                volumes:
                  - redis-data:/data
                restart: unless-stopped

              api:
                image: ${REGISTRY}/${API_IMAGE}:latest
                container_name: showtracker-api
                env_file: .env
                depends_on:
                  - db
                  - redis
                ports:
                  - "4000:4000"
                restart: unless-stopped

              client:
                image: ${REGISTRY}/${CLIENT_IMAGE}:latest
                container_name: showtracker-client
                depends_on:
                  - api
                ports:
                  - "8080:80"
                restart: unless-stopped

            volumes:
              db-data:
              redis-data:
            YML

            docker compose pull
            docker compose up -d
            docker compose exec -T api npx prisma migrate deploy || docker compose exec -T api npm run db:push

            docker image prune -af || true
            docker container prune -f || true
