name: CI • Build, Test, E2E, Dockerize & Push

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}
  API_IMAGE: ${{ github.repository_owner }}/mse-api
  CLIENT_IMAGE: ${{ github.repository_owner }}/mse-client

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test-api:
    name: Build & Unit Test API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Restore
        run: dotnet restore ./server

      - name: Build (Release)
        run: dotnet build ./server --configuration Release --no-restore

      - name: Test (xUnit/NUnit/MSTest)
        run: dotnet test ./server --configuration Release --no-build --logger trx

      - name: Upload .NET test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-test-results
          path: '**/*.trx'

  e2e-and-push:
    name: Playwright E2E • Dockerize • Push Images
    runs-on: ubuntu-latest
    needs: build-and-test-api
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: |
            client/client/package-lock.json

      - name: Install client deps
        working-directory: client/client
        run: npm ci

      - name: Install Playwright Browsers
        working-directory: client/client
        run: npx playwright install --with-deps

      - name: Start docker-compose (db, redis, api)
        run: |
          docker compose -f docker-compose.yml up -d --build db redis api
          echo "Waiting for API on :4000..."
          for i in {1..60}; do
            if curl -fsS http://localhost:4000/health || curl -fsS http://localhost:4000; then
              echo "API is up"; break
            fi
            sleep 2
          done

      - name: Run Playwright tests
        working-directory: client/client
        env:
          CI: 'true'
        run: npx playwright test --reporter=html

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: client/client/playwright-report
          retention-days: 7

      - name: Tear down docker-compose
        if: always()
        run: docker compose -f docker-compose.yml down -v

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push API image
        uses: docker/build-push-action@v6
        with:
          context: ./server
          file: ./server/Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.API_IMAGE }}:sha-${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.API_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & Push Client image
        uses: docker/build-push-action@v6
        with:
          context: ./client
          file: ./client/Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.CLIENT_IMAGE }}:sha-${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.CLIENT_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
